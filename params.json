{
  "name": "Regular-express-and-parse-url",
  "tagline": "总结正则表达式和解析url",
  "body": "# 总结正则表达式和解析url\r\n## 解析url\r\n#### 将url的查询参数解析为字典对象？\r\n解决方案一般是拆字符串和用正则匹配。比价推荐的方法是正则匹配。因为url允许用户随意输入，如果用拆字符串的方法，有任何一个地方没考虑到容错，\r\n就会导致程序出错。而正则就没有这个问题。它只匹配出正确的配对。非法的全部过滤掉。不过这里把两种方式都写一下。\r\n\r\n**拆分字符串的方式**\r\n\r\n```\r\nfunction getUrlParms(){\r\n     var args=new Object(); \r\n     var query=location.search.substring(1);//获取查询串 \r\n     var pairs=query.split(\"&\");    // 以&分割\r\n     \r\n     for(var i=0;i<pairs.length;i++){ \r\n         var pos=pairs[i].indexOf('=');         //查找name=value \r\n         if(pos==-1) continue;                  //如果没有找到就跳过 \r\n         var argname=pairs[i].substring(0,pos); //提取name \r\n         var value=pairs[i].substring(pos+1);   //提取value \r\n         args[argname]=decodeURIComponent(value); //存为属性 \r\n     }\r\n     return args;\r\n}\r\n```\r\n\r\n**正则的方式**\r\n\r\n```\r\nfunction getQueryObject(url){\r\n  var urlStr=url==null?window.location.href:url;    //校验传进来的url。如果为null 则重新从window对象中取得\r\n  var search = urlStr.substring(urlStr.lastIndexOf(\"?\")+1);  //获取到问号后边的部分\r\n  var obj={};\r\n  var reg = /([^?&=]+)=([^?&=]*)/g;\r\n  search.replace(reg,function(rs,$1,$2){\r\n      var name = decodeURIComponent($1);\r\n      var val = decodeURIComponent($2);\r\n      obj[name]=String(val);\r\n      return rs;\r\n  });\r\n  return obj;\r\n}\r\n```\r\n明天解释正则~~\r\n\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}